// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/route/v1"
	v1alpha1 "github.com/openshift/route-monitor-operator/api/v1alpha1"
	blackboxexporter "github.com/openshift/route-monitor-operator/pkg/consts/blackboxexporter"
	reconcile "github.com/openshift/route-monitor-operator/pkg/util/reconcile"
	v10 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	reflect "reflect"
	controllerruntime "sigs.k8s.io/controller-runtime"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRouteMonitorSupplementInterface is a mock of RouteMonitorSupplementInterface interface
type MockRouteMonitorSupplementInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMonitorSupplementInterfaceMockRecorder
}

// MockRouteMonitorSupplementInterfaceMockRecorder is the mock recorder for MockRouteMonitorSupplementInterface
type MockRouteMonitorSupplementInterfaceMockRecorder struct {
	mock *MockRouteMonitorSupplementInterface
}

// NewMockRouteMonitorSupplementInterface creates a new mock instance
func NewMockRouteMonitorSupplementInterface(ctrl *gomock.Controller) *MockRouteMonitorSupplementInterface {
	mock := &MockRouteMonitorSupplementInterface{ctrl: ctrl}
	mock.recorder = &MockRouteMonitorSupplementInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteMonitorSupplementInterface) EXPECT() *MockRouteMonitorSupplementInterfaceMockRecorder {
	return m.recorder
}

// EnsurePrometheusRuleExists mocks base method
func (m *MockRouteMonitorSupplementInterface) EnsurePrometheusRuleExists(routeMonitor v1alpha1.RouteMonitor) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsurePrometheusRuleExists", routeMonitor)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsurePrometheusRuleExists indicates an expected call of EnsurePrometheusRuleExists
func (mr *MockRouteMonitorSupplementInterfaceMockRecorder) EnsurePrometheusRuleExists(routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsurePrometheusRuleExists", reflect.TypeOf((*MockRouteMonitorSupplementInterface)(nil).EnsurePrometheusRuleExists), routeMonitor)
}

// EnsureServiceMonitorExists mocks base method
func (m *MockRouteMonitorSupplementInterface) EnsureServiceMonitorExists(routeMonitor v1alpha1.RouteMonitor) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureServiceMonitorExists", routeMonitor)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureServiceMonitorExists indicates an expected call of EnsureServiceMonitorExists
func (mr *MockRouteMonitorSupplementInterfaceMockRecorder) EnsureServiceMonitorExists(routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureServiceMonitorExists", reflect.TypeOf((*MockRouteMonitorSupplementInterface)(nil).EnsureServiceMonitorExists), routeMonitor)
}

// EnsureRouteMonitorAndDependenciesAbsent mocks base method
func (m *MockRouteMonitorSupplementInterface) EnsureRouteMonitorAndDependenciesAbsent(routeMonitor v1alpha1.RouteMonitor) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRouteMonitorAndDependenciesAbsent", routeMonitor)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureRouteMonitorAndDependenciesAbsent indicates an expected call of EnsureRouteMonitorAndDependenciesAbsent
func (mr *MockRouteMonitorSupplementInterfaceMockRecorder) EnsureRouteMonitorAndDependenciesAbsent(routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRouteMonitorAndDependenciesAbsent", reflect.TypeOf((*MockRouteMonitorSupplementInterface)(nil).EnsureRouteMonitorAndDependenciesAbsent), routeMonitor)
}

// EnsureRouteURLExists mocks base method
func (m *MockRouteMonitorSupplementInterface) EnsureRouteURLExists(route v1.Route, routeMonitor v1alpha1.RouteMonitor) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRouteURLExists", route, routeMonitor)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureRouteURLExists indicates an expected call of EnsureRouteURLExists
func (mr *MockRouteMonitorSupplementInterfaceMockRecorder) EnsureRouteURLExists(route, routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRouteURLExists", reflect.TypeOf((*MockRouteMonitorSupplementInterface)(nil).EnsureRouteURLExists), route, routeMonitor)
}

// GetRouteMonitor mocks base method
func (m *MockRouteMonitorSupplementInterface) GetRouteMonitor(req controllerruntime.Request) (v1alpha1.RouteMonitor, reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteMonitor", req)
	ret0, _ := ret[0].(v1alpha1.RouteMonitor)
	ret1, _ := ret[1].(reconcile.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRouteMonitor indicates an expected call of GetRouteMonitor
func (mr *MockRouteMonitorSupplementInterfaceMockRecorder) GetRouteMonitor(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteMonitor", reflect.TypeOf((*MockRouteMonitorSupplementInterface)(nil).GetRouteMonitor), req)
}

// GetRoute mocks base method
func (m *MockRouteMonitorSupplementInterface) GetRoute(routeMonitor v1alpha1.RouteMonitor) (v1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", routeMonitor)
	ret0, _ := ret[0].(v1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute
func (mr *MockRouteMonitorSupplementInterfaceMockRecorder) GetRoute(routeMonitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockRouteMonitorSupplementInterface)(nil).GetRoute), routeMonitor)
}

// MockClusterURLMonitorSupplementInterface is a mock of ClusterURLMonitorSupplementInterface interface
type MockClusterURLMonitorSupplementInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterURLMonitorSupplementInterfaceMockRecorder
}

// MockClusterURLMonitorSupplementInterfaceMockRecorder is the mock recorder for MockClusterURLMonitorSupplementInterface
type MockClusterURLMonitorSupplementInterfaceMockRecorder struct {
	mock *MockClusterURLMonitorSupplementInterface
}

// NewMockClusterURLMonitorSupplementInterface creates a new mock instance
func NewMockClusterURLMonitorSupplementInterface(ctrl *gomock.Controller) *MockClusterURLMonitorSupplementInterface {
	mock := &MockClusterURLMonitorSupplementInterface{ctrl: ctrl}
	mock.recorder = &MockClusterURLMonitorSupplementInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterURLMonitorSupplementInterface) EXPECT() *MockClusterURLMonitorSupplementInterfaceMockRecorder {
	return m.recorder
}

// EnsureServiceMonitorExists mocks base method
func (m *MockClusterURLMonitorSupplementInterface) EnsureServiceMonitorExists() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureServiceMonitorExists")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureServiceMonitorExists indicates an expected call of EnsureServiceMonitorExists
func (mr *MockClusterURLMonitorSupplementInterfaceMockRecorder) EnsureServiceMonitorExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureServiceMonitorExists", reflect.TypeOf((*MockClusterURLMonitorSupplementInterface)(nil).EnsureServiceMonitorExists))
}

// EnsurePrometheusRuleExists mocks base method
func (m *MockClusterURLMonitorSupplementInterface) EnsurePrometheusRuleExists() (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsurePrometheusRuleExists")
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsurePrometheusRuleExists indicates an expected call of EnsurePrometheusRuleExists
func (mr *MockClusterURLMonitorSupplementInterfaceMockRecorder) EnsurePrometheusRuleExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsurePrometheusRuleExists", reflect.TypeOf((*MockClusterURLMonitorSupplementInterface)(nil).EnsurePrometheusRuleExists))
}

// EnsureDeletionProcessed mocks base method
func (m *MockClusterURLMonitorSupplementInterface) EnsureDeletionProcessed() (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeletionProcessed")
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureDeletionProcessed indicates an expected call of EnsureDeletionProcessed
func (mr *MockClusterURLMonitorSupplementInterfaceMockRecorder) EnsureDeletionProcessed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeletionProcessed", reflect.TypeOf((*MockClusterURLMonitorSupplementInterface)(nil).EnsureDeletionProcessed))
}

// ProcessRequest mocks base method
func (m *MockClusterURLMonitorSupplementInterface) ProcessRequest() (controllerruntime.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRequest")
	ret0, _ := ret[0].(controllerruntime.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessRequest indicates an expected call of ProcessRequest
func (mr *MockClusterURLMonitorSupplementInterfaceMockRecorder) ProcessRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRequest", reflect.TypeOf((*MockClusterURLMonitorSupplementInterface)(nil).ProcessRequest))
}

// MockUtilInterface is a mock of UtilInterface interface
type MockUtilInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUtilInterfaceMockRecorder
}

// MockUtilInterfaceMockRecorder is the mock recorder for MockUtilInterface
type MockUtilInterfaceMockRecorder struct {
	mock *MockUtilInterface
}

// NewMockUtilInterface creates a new mock instance
func NewMockUtilInterface(ctrl *gomock.Controller) *MockUtilInterface {
	mock := &MockUtilInterface{ctrl: ctrl}
	mock.recorder = &MockUtilInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtilInterface) EXPECT() *MockUtilInterfaceMockRecorder {
	return m.recorder
}

// UpdateServiceMonitorDeployment mocks base method
func (m *MockUtilInterface) UpdateServiceMonitorDeployment(ctx context.Context, c client.Client, template v10.ServiceMonitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceMonitorDeployment", ctx, c, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceMonitorDeployment indicates an expected call of UpdateServiceMonitorDeployment
func (mr *MockUtilInterfaceMockRecorder) UpdateServiceMonitorDeployment(ctx, c, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceMonitorDeployment", reflect.TypeOf((*MockUtilInterface)(nil).UpdateServiceMonitorDeployment), ctx, c, template)
}

// DeleteServiceMonitorDeployment mocks base method
func (m *MockUtilInterface) DeleteServiceMonitorDeployment(ctx context.Context, c client.Client, serviceMonitorRef v1alpha1.NamespacedName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceMonitorDeployment", ctx, c, serviceMonitorRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceMonitorDeployment indicates an expected call of DeleteServiceMonitorDeployment
func (mr *MockUtilInterfaceMockRecorder) DeleteServiceMonitorDeployment(ctx, c, serviceMonitorRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceMonitorDeployment", reflect.TypeOf((*MockUtilInterface)(nil).DeleteServiceMonitorDeployment), ctx, c, serviceMonitorRef)
}

// UpdatePrometheusRuleDeployment mocks base method
func (m *MockUtilInterface) UpdatePrometheusRuleDeployment(ctx context.Context, c client.Client, template v10.PrometheusRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrometheusRuleDeployment", ctx, c, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePrometheusRuleDeployment indicates an expected call of UpdatePrometheusRuleDeployment
func (mr *MockUtilInterfaceMockRecorder) UpdatePrometheusRuleDeployment(ctx, c, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrometheusRuleDeployment", reflect.TypeOf((*MockUtilInterface)(nil).UpdatePrometheusRuleDeployment), ctx, c, template)
}

// DeletePrometheusRuleDeployment mocks base method
func (m *MockUtilInterface) DeletePrometheusRuleDeployment(ctx context.Context, c client.Client, prometheusRuleRef v1alpha1.NamespacedName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrometheusRuleDeployment", ctx, c, prometheusRuleRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrometheusRuleDeployment indicates an expected call of DeletePrometheusRuleDeployment
func (mr *MockUtilInterfaceMockRecorder) DeletePrometheusRuleDeployment(ctx, c, prometheusRuleRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrometheusRuleDeployment", reflect.TypeOf((*MockUtilInterface)(nil).DeletePrometheusRuleDeployment), ctx, c, prometheusRuleRef)
}

// SetResourceReference mocks base method
func (m *MockUtilInterface) SetResourceReference(reference *v1alpha1.NamespacedName, targetNamespace types.NamespacedName) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResourceReference", reference, targetNamespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetResourceReference indicates an expected call of SetResourceReference
func (mr *MockUtilInterfaceMockRecorder) SetResourceReference(reference, targetNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceReference", reflect.TypeOf((*MockUtilInterface)(nil).SetResourceReference), reference, targetNamespace)
}

// SetErrorStatus mocks base method
func (m *MockUtilInterface) SetErrorStatus(errorStatus *string, err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetErrorStatus", errorStatus, err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetErrorStatus indicates an expected call of SetErrorStatus
func (mr *MockUtilInterfaceMockRecorder) SetErrorStatus(errorStatus, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErrorStatus", reflect.TypeOf((*MockUtilInterface)(nil).SetErrorStatus), errorStatus, err)
}

// UpdateReconciledCR mocks base method
func (m *MockUtilInterface) UpdateReconciledCR(ctx context.Context, c client.Client, cr runtime.Object) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReconciledCR", ctx, c, cr)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReconciledCR indicates an expected call of UpdateReconciledCR
func (mr *MockUtilInterfaceMockRecorder) UpdateReconciledCR(ctx, c, cr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReconciledCR", reflect.TypeOf((*MockUtilInterface)(nil).UpdateReconciledCR), ctx, c, cr)
}

// DeleteFinalizer mocks base method
func (m *MockUtilInterface) DeleteFinalizer(o v11.Object) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFinalizer", o)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteFinalizer indicates an expected call of DeleteFinalizer
func (mr *MockUtilInterfaceMockRecorder) DeleteFinalizer(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFinalizer", reflect.TypeOf((*MockUtilInterface)(nil).DeleteFinalizer), o)
}

// SetFinalizer mocks base method
func (m *MockUtilInterface) SetFinalizer(o v11.Object) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinalizer", o)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetFinalizer indicates an expected call of SetFinalizer
func (mr *MockUtilInterfaceMockRecorder) SetFinalizer(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizer", reflect.TypeOf((*MockUtilInterface)(nil).SetFinalizer), o)
}

// AreMonitorSettingsValid mocks base method
func (m *MockUtilInterface) AreMonitorSettingsValid(routeURL string, sloSpec v1alpha1.SloSpec) (bool, error, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreMonitorSettingsValid", routeURL, sloSpec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// AreMonitorSettingsValid indicates an expected call of AreMonitorSettingsValid
func (mr *MockUtilInterfaceMockRecorder) AreMonitorSettingsValid(routeURL, sloSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreMonitorSettingsValid", reflect.TypeOf((*MockUtilInterface)(nil).AreMonitorSettingsValid), routeURL, sloSpec)
}

// GetClusterID mocks base method
func (m *MockUtilInterface) GetClusterID(c client.Client) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterID", c)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClusterID indicates an expected call of GetClusterID
func (mr *MockUtilInterfaceMockRecorder) GetClusterID(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterID", reflect.TypeOf((*MockUtilInterface)(nil).GetClusterID), c)
}

// GetServiceMonitor mocks base method
func (m *MockUtilInterface) GetServiceMonitor(ctx context.Context, c client.Client, namespacedName types.NamespacedName) (v10.ServiceMonitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceMonitor", ctx, c, namespacedName)
	ret0, _ := ret[0].(v10.ServiceMonitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceMonitor indicates an expected call of GetServiceMonitor
func (mr *MockUtilInterfaceMockRecorder) GetServiceMonitor(ctx, c, namespacedName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceMonitor", reflect.TypeOf((*MockUtilInterface)(nil).GetServiceMonitor), ctx, c, namespacedName)
}

// GetClusterDomain mocks base method
func (m *MockUtilInterface) GetClusterDomain(ctx context.Context, c client.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterDomain", ctx, c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterDomain indicates an expected call of GetClusterDomain
func (mr *MockUtilInterfaceMockRecorder) GetClusterDomain(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterDomain", reflect.TypeOf((*MockUtilInterface)(nil).GetClusterDomain), ctx, c)
}

// MockBlackBoxExporter is a mock of BlackBoxExporter interface
type MockBlackBoxExporter struct {
	ctrl     *gomock.Controller
	recorder *MockBlackBoxExporterMockRecorder
}

// MockBlackBoxExporterMockRecorder is the mock recorder for MockBlackBoxExporter
type MockBlackBoxExporterMockRecorder struct {
	mock *MockBlackBoxExporter
}

// NewMockBlackBoxExporter creates a new mock instance
func NewMockBlackBoxExporter(ctrl *gomock.Controller) *MockBlackBoxExporter {
	mock := &MockBlackBoxExporter{ctrl: ctrl}
	mock.recorder = &MockBlackBoxExporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlackBoxExporter) EXPECT() *MockBlackBoxExporterMockRecorder {
	return m.recorder
}

// EnsureBlackBoxExporterResourcesExist mocks base method
func (m *MockBlackBoxExporter) EnsureBlackBoxExporterResourcesExist() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureBlackBoxExporterResourcesExist")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureBlackBoxExporterResourcesExist indicates an expected call of EnsureBlackBoxExporterResourcesExist
func (mr *MockBlackBoxExporterMockRecorder) EnsureBlackBoxExporterResourcesExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureBlackBoxExporterResourcesExist", reflect.TypeOf((*MockBlackBoxExporter)(nil).EnsureBlackBoxExporterResourcesExist))
}

// EnsureBlackBoxExporterResourcesAbsent mocks base method
func (m *MockBlackBoxExporter) EnsureBlackBoxExporterResourcesAbsent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureBlackBoxExporterResourcesAbsent")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureBlackBoxExporterResourcesAbsent indicates an expected call of EnsureBlackBoxExporterResourcesAbsent
func (mr *MockBlackBoxExporterMockRecorder) EnsureBlackBoxExporterResourcesAbsent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureBlackBoxExporterResourcesAbsent", reflect.TypeOf((*MockBlackBoxExporter)(nil).EnsureBlackBoxExporterResourcesAbsent))
}

// ShouldDeleteBlackBoxExporterResources mocks base method
func (m *MockBlackBoxExporter) ShouldDeleteBlackBoxExporterResources() (blackboxexporter.ShouldDeleteBlackBoxExporter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldDeleteBlackBoxExporterResources")
	ret0, _ := ret[0].(blackboxexporter.ShouldDeleteBlackBoxExporter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldDeleteBlackBoxExporterResources indicates an expected call of ShouldDeleteBlackBoxExporterResources
func (mr *MockBlackBoxExporterMockRecorder) ShouldDeleteBlackBoxExporterResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldDeleteBlackBoxExporterResources", reflect.TypeOf((*MockBlackBoxExporter)(nil).ShouldDeleteBlackBoxExporterResources))
}

// GetBlackBoxExporterNamespace mocks base method
func (m *MockBlackBoxExporter) GetBlackBoxExporterNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlackBoxExporterNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBlackBoxExporterNamespace indicates an expected call of GetBlackBoxExporterNamespace
func (mr *MockBlackBoxExporterMockRecorder) GetBlackBoxExporterNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlackBoxExporterNamespace", reflect.TypeOf((*MockBlackBoxExporter)(nil).GetBlackBoxExporterNamespace))
}
