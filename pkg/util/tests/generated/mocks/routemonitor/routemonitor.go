// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/route-monitor-operator/controllers/routemonitor (interfaces: RouteMonitorAdapter)

// Package routemonitor is a generated GoMock package.
package routemonitor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/route/v1"
	v1alpha1 "github.com/openshift/route-monitor-operator/api/v1alpha1"
	v10 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	v11 "k8s.io/api/apps/v1"
	v12 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
	reflect "reflect"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockRouteMonitorAdapter is a mock of RouteMonitorAdapter interface
type MockRouteMonitorAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMonitorAdapterMockRecorder
}

// MockRouteMonitorAdapterMockRecorder is the mock recorder for MockRouteMonitorAdapter
type MockRouteMonitorAdapterMockRecorder struct {
	mock *MockRouteMonitorAdapter
}

// NewMockRouteMonitorAdapter creates a new mock instance
func NewMockRouteMonitorAdapter(ctrl *gomock.Controller) *MockRouteMonitorAdapter {
	mock := &MockRouteMonitorAdapter{ctrl: ctrl}
	mock.recorder = &MockRouteMonitorAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteMonitorAdapter) EXPECT() *MockRouteMonitorAdapterMockRecorder {
	return m.recorder
}

// CreateBlackBoxExporterDeployment mocks base method
func (m *MockRouteMonitorAdapter) CreateBlackBoxExporterDeployment(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterDeployment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterDeployment indicates an expected call of CreateBlackBoxExporterDeployment
func (mr *MockRouteMonitorAdapterMockRecorder) CreateBlackBoxExporterDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterDeployment", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).CreateBlackBoxExporterDeployment), arg0)
}

// CreateBlackBoxExporterResources mocks base method
func (m *MockRouteMonitorAdapter) CreateBlackBoxExporterResources(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterResources", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterResources indicates an expected call of CreateBlackBoxExporterResources
func (mr *MockRouteMonitorAdapterMockRecorder) CreateBlackBoxExporterResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterResources", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).CreateBlackBoxExporterResources), arg0)
}

// CreateBlackBoxExporterService mocks base method
func (m *MockRouteMonitorAdapter) CreateBlackBoxExporterService(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterService indicates an expected call of CreateBlackBoxExporterService
func (mr *MockRouteMonitorAdapterMockRecorder) CreateBlackBoxExporterService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterService", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).CreateBlackBoxExporterService), arg0)
}

// CreateServiceMonitor mocks base method
func (m *MockRouteMonitorAdapter) CreateServiceMonitor(arg0 context.Context, arg1 *v1alpha1.RouteMonitor) (*reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceMonitor", arg0, arg1)
	ret0, _ := ret[0].(*reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceMonitor indicates an expected call of CreateServiceMonitor
func (mr *MockRouteMonitorAdapterMockRecorder) CreateServiceMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceMonitor", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).CreateServiceMonitor), arg0, arg1)
}

// DeleteBlackBoxExporterDeployment mocks base method
func (m *MockRouteMonitorAdapter) DeleteBlackBoxExporterDeployment(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackBoxExporterDeployment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackBoxExporterDeployment indicates an expected call of DeleteBlackBoxExporterDeployment
func (mr *MockRouteMonitorAdapterMockRecorder) DeleteBlackBoxExporterDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackBoxExporterDeployment", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).DeleteBlackBoxExporterDeployment), arg0)
}

// DeleteBlackBoxExporterResources mocks base method
func (m *MockRouteMonitorAdapter) DeleteBlackBoxExporterResources(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackBoxExporterResources", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackBoxExporterResources indicates an expected call of DeleteBlackBoxExporterResources
func (mr *MockRouteMonitorAdapterMockRecorder) DeleteBlackBoxExporterResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackBoxExporterResources", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).DeleteBlackBoxExporterResources), arg0)
}

// DeleteBlackBoxExporterService mocks base method
func (m *MockRouteMonitorAdapter) DeleteBlackBoxExporterService(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackBoxExporterService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackBoxExporterService indicates an expected call of DeleteBlackBoxExporterService
func (mr *MockRouteMonitorAdapterMockRecorder) DeleteBlackBoxExporterService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackBoxExporterService", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).DeleteBlackBoxExporterService), arg0)
}

// DeleteRouteMonitorAndDependencies mocks base method
func (m *MockRouteMonitorAdapter) DeleteRouteMonitorAndDependencies(arg0 context.Context, arg1 *v1alpha1.RouteMonitor) (*reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteMonitorAndDependencies", arg0, arg1)
	ret0, _ := ret[0].(*reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteMonitorAndDependencies indicates an expected call of DeleteRouteMonitorAndDependencies
func (mr *MockRouteMonitorAdapterMockRecorder) DeleteRouteMonitorAndDependencies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteMonitorAndDependencies", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).DeleteRouteMonitorAndDependencies), arg0, arg1)
}

// DeleteServiceMonitorResource mocks base method
func (m *MockRouteMonitorAdapter) DeleteServiceMonitorResource(arg0 context.Context, arg1 *v1alpha1.RouteMonitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceMonitorResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceMonitorResource indicates an expected call of DeleteServiceMonitorResource
func (mr *MockRouteMonitorAdapterMockRecorder) DeleteServiceMonitorResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceMonitorResource", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).DeleteServiceMonitorResource), arg0, arg1)
}

// GetRoute mocks base method
func (m *MockRouteMonitorAdapter) GetRoute(arg0 context.Context, arg1 *v1alpha1.RouteMonitor) (*v1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", arg0, arg1)
	ret0, _ := ret[0].(*v1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute
func (mr *MockRouteMonitorAdapterMockRecorder) GetRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).GetRoute), arg0, arg1)
}

// GetRouteMonitor mocks base method
func (m *MockRouteMonitorAdapter) GetRouteMonitor(arg0 context.Context, arg1 reconcile.Request) (*v1alpha1.RouteMonitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteMonitor", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.RouteMonitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteMonitor indicates an expected call of GetRouteMonitor
func (mr *MockRouteMonitorAdapterMockRecorder) GetRouteMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteMonitor", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).GetRouteMonitor), arg0, arg1)
}

// HasFinalizer mocks base method
func (m *MockRouteMonitorAdapter) HasFinalizer(arg0 *v1alpha1.RouteMonitor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFinalizer", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasFinalizer indicates an expected call of HasFinalizer
func (mr *MockRouteMonitorAdapterMockRecorder) HasFinalizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFinalizer", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).HasFinalizer), arg0)
}

// ShouldDeleteBlackBoxExporterResources mocks base method
func (m *MockRouteMonitorAdapter) ShouldDeleteBlackBoxExporterResources(arg0 context.Context, arg1 *v1alpha1.RouteMonitor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldDeleteBlackBoxExporterResources", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldDeleteBlackBoxExporterResources indicates an expected call of ShouldDeleteBlackBoxExporterResources
func (mr *MockRouteMonitorAdapterMockRecorder) ShouldDeleteBlackBoxExporterResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldDeleteBlackBoxExporterResources", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).ShouldDeleteBlackBoxExporterResources), arg0, arg1)
}

// UpdateRouteURL mocks base method
func (m *MockRouteMonitorAdapter) UpdateRouteURL(arg0 context.Context, arg1 *v1.Route, arg2 *v1alpha1.RouteMonitor) (*reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteURL indicates an expected call of UpdateRouteURL
func (mr *MockRouteMonitorAdapterMockRecorder) UpdateRouteURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteURL", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).UpdateRouteURL), arg0, arg1, arg2)
}

// WasDeleteRequested mocks base method
func (m *MockRouteMonitorAdapter) WasDeleteRequested(arg0 *v1alpha1.RouteMonitor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasDeleteRequested", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WasDeleteRequested indicates an expected call of WasDeleteRequested
func (mr *MockRouteMonitorAdapterMockRecorder) WasDeleteRequested(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasDeleteRequested", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).WasDeleteRequested), arg0)
}

// templateForBlackBoxExporterDeployment mocks base method
func (m *MockRouteMonitorAdapter) templateForBlackBoxExporterDeployment() *v11.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "templateForBlackBoxExporterDeployment")
	ret0, _ := ret[0].(*v11.Deployment)
	return ret0
}

// templateForBlackBoxExporterDeployment indicates an expected call of templateForBlackBoxExporterDeployment
func (mr *MockRouteMonitorAdapterMockRecorder) templateForBlackBoxExporterDeployment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "templateForBlackBoxExporterDeployment", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).templateForBlackBoxExporterDeployment))
}

// templateForBlackBoxExporterService mocks base method
func (m *MockRouteMonitorAdapter) templateForBlackBoxExporterService() *v12.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "templateForBlackBoxExporterService")
	ret0, _ := ret[0].(*v12.Service)
	return ret0
}

// templateForBlackBoxExporterService indicates an expected call of templateForBlackBoxExporterService
func (mr *MockRouteMonitorAdapterMockRecorder) templateForBlackBoxExporterService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "templateForBlackBoxExporterService", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).templateForBlackBoxExporterService))
}

// templateForServiceMonitorName mocks base method
func (m *MockRouteMonitorAdapter) templateForServiceMonitorName(arg0 *v1alpha1.RouteMonitor) types.NamespacedName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "templateForServiceMonitorName", arg0)
	ret0, _ := ret[0].(types.NamespacedName)
	return ret0
}

// templateForServiceMonitorName indicates an expected call of templateForServiceMonitorName
func (mr *MockRouteMonitorAdapterMockRecorder) templateForServiceMonitorName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "templateForServiceMonitorName", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).templateForServiceMonitorName), arg0)
}

// templateForServiceMonitorResource mocks base method
func (m *MockRouteMonitorAdapter) templateForServiceMonitorResource(arg0 *v1alpha1.RouteMonitor, arg1 string) *v10.ServiceMonitor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "templateForServiceMonitorResource", arg0, arg1)
	ret0, _ := ret[0].(*v10.ServiceMonitor)
	return ret0
}

// templateForServiceMonitorResource indicates an expected call of templateForServiceMonitorResource
func (mr *MockRouteMonitorAdapterMockRecorder) templateForServiceMonitorResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "templateForServiceMonitorResource", reflect.TypeOf((*MockRouteMonitorAdapter)(nil).templateForServiceMonitorResource), arg0, arg1)
}
