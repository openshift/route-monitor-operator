// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/route-monitor-operator/controllers/routemonitor (interfaces: RouteMonitorInterface)

// Package routemonitor is a generated GoMock package.
package routemonitor

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/route/v1"
	v1alpha1 "github.com/openshift/route-monitor-operator/api/v1alpha1"
	v10 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	v11 "k8s.io/api/apps/v1"
	v12 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
	reflect "reflect"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockRouteMonitorInterface is a mock of RouteMonitorInterface interface
type MockRouteMonitorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMonitorInterfaceMockRecorder
}

// MockRouteMonitorInterfaceMockRecorder is the mock recorder for MockRouteMonitorInterface
type MockRouteMonitorInterfaceMockRecorder struct {
	mock *MockRouteMonitorInterface
}

// NewMockRouteMonitorInterface creates a new mock instance
func NewMockRouteMonitorInterface(ctrl *gomock.Controller) *MockRouteMonitorInterface {
	mock := &MockRouteMonitorInterface{ctrl: ctrl}
	mock.recorder = &MockRouteMonitorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteMonitorInterface) EXPECT() *MockRouteMonitorInterfaceMockRecorder {
	return m.recorder
}

// CreateBlackBoxExporterDeployment mocks base method
func (m *MockRouteMonitorInterface) CreateBlackBoxExporterDeployment() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterDeployment")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterDeployment indicates an expected call of CreateBlackBoxExporterDeployment
func (mr *MockRouteMonitorInterfaceMockRecorder) CreateBlackBoxExporterDeployment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterDeployment", reflect.TypeOf((*MockRouteMonitorInterface)(nil).CreateBlackBoxExporterDeployment))
}

// CreateBlackBoxExporterResources mocks base method
func (m *MockRouteMonitorInterface) CreateBlackBoxExporterResources() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterResources")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterResources indicates an expected call of CreateBlackBoxExporterResources
func (mr *MockRouteMonitorInterfaceMockRecorder) CreateBlackBoxExporterResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterResources", reflect.TypeOf((*MockRouteMonitorInterface)(nil).CreateBlackBoxExporterResources))
}

// CreateBlackBoxExporterService mocks base method
func (m *MockRouteMonitorInterface) CreateBlackBoxExporterService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlackBoxExporterService")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlackBoxExporterService indicates an expected call of CreateBlackBoxExporterService
func (mr *MockRouteMonitorInterfaceMockRecorder) CreateBlackBoxExporterService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlackBoxExporterService", reflect.TypeOf((*MockRouteMonitorInterface)(nil).CreateBlackBoxExporterService))
}

// CreateServiceMonitorResource mocks base method
func (m *MockRouteMonitorInterface) CreateServiceMonitorResource(arg0 *v1alpha1.RouteMonitor) (*reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceMonitorResource", arg0)
	ret0, _ := ret[0].(*reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceMonitorResource indicates an expected call of CreateServiceMonitorResource
func (mr *MockRouteMonitorInterfaceMockRecorder) CreateServiceMonitorResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceMonitorResource", reflect.TypeOf((*MockRouteMonitorInterface)(nil).CreateServiceMonitorResource), arg0)
}

// DeleteBlackBoxExporterDeployment mocks base method
func (m *MockRouteMonitorInterface) DeleteBlackBoxExporterDeployment() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackBoxExporterDeployment")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackBoxExporterDeployment indicates an expected call of DeleteBlackBoxExporterDeployment
func (mr *MockRouteMonitorInterfaceMockRecorder) DeleteBlackBoxExporterDeployment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackBoxExporterDeployment", reflect.TypeOf((*MockRouteMonitorInterface)(nil).DeleteBlackBoxExporterDeployment))
}

// DeleteBlackBoxExporterResources mocks base method
func (m *MockRouteMonitorInterface) DeleteBlackBoxExporterResources() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackBoxExporterResources")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackBoxExporterResources indicates an expected call of DeleteBlackBoxExporterResources
func (mr *MockRouteMonitorInterfaceMockRecorder) DeleteBlackBoxExporterResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackBoxExporterResources", reflect.TypeOf((*MockRouteMonitorInterface)(nil).DeleteBlackBoxExporterResources))
}

// DeleteBlackBoxExporterService mocks base method
func (m *MockRouteMonitorInterface) DeleteBlackBoxExporterService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlackBoxExporterService")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlackBoxExporterService indicates an expected call of DeleteBlackBoxExporterService
func (mr *MockRouteMonitorInterfaceMockRecorder) DeleteBlackBoxExporterService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlackBoxExporterService", reflect.TypeOf((*MockRouteMonitorInterface)(nil).DeleteBlackBoxExporterService))
}

// DeleteRouteMonitorAndDependencies mocks base method
func (m *MockRouteMonitorInterface) DeleteRouteMonitorAndDependencies(arg0 *v1alpha1.RouteMonitor) (*reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteMonitorAndDependencies", arg0)
	ret0, _ := ret[0].(*reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteMonitorAndDependencies indicates an expected call of DeleteRouteMonitorAndDependencies
func (mr *MockRouteMonitorInterfaceMockRecorder) DeleteRouteMonitorAndDependencies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteMonitorAndDependencies", reflect.TypeOf((*MockRouteMonitorInterface)(nil).DeleteRouteMonitorAndDependencies), arg0)
}

// DeleteServiceMonitorResource mocks base method
func (m *MockRouteMonitorInterface) DeleteServiceMonitorResource(arg0 *v1alpha1.RouteMonitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceMonitorResource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceMonitorResource indicates an expected call of DeleteServiceMonitorResource
func (mr *MockRouteMonitorInterfaceMockRecorder) DeleteServiceMonitorResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceMonitorResource", reflect.TypeOf((*MockRouteMonitorInterface)(nil).DeleteServiceMonitorResource), arg0)
}

// GetRoute mocks base method
func (m *MockRouteMonitorInterface) GetRoute(arg0 *v1alpha1.RouteMonitor) (*v1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", arg0)
	ret0, _ := ret[0].(*v1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute
func (mr *MockRouteMonitorInterfaceMockRecorder) GetRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockRouteMonitorInterface)(nil).GetRoute), arg0)
}

// GetRouteMonitor mocks base method
func (m *MockRouteMonitorInterface) GetRouteMonitor(arg0 reconcile.Request) (*v1alpha1.RouteMonitor, *reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteMonitor", arg0)
	ret0, _ := ret[0].(*v1alpha1.RouteMonitor)
	ret1, _ := ret[1].(*reconcile.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRouteMonitor indicates an expected call of GetRouteMonitor
func (mr *MockRouteMonitorInterfaceMockRecorder) GetRouteMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteMonitor", reflect.TypeOf((*MockRouteMonitorInterface)(nil).GetRouteMonitor), arg0)
}

// HasFinalizer mocks base method
func (m *MockRouteMonitorInterface) HasFinalizer(arg0 *v1alpha1.RouteMonitor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFinalizer", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasFinalizer indicates an expected call of HasFinalizer
func (mr *MockRouteMonitorInterfaceMockRecorder) HasFinalizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFinalizer", reflect.TypeOf((*MockRouteMonitorInterface)(nil).HasFinalizer), arg0)
}

// PerformRouteMonitorDeletion mocks base method
func (m *MockRouteMonitorInterface) PerformRouteMonitorDeletion(arg0 *v1alpha1.RouteMonitor) (*reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformRouteMonitorDeletion", arg0)
	ret0, _ := ret[0].(*reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformRouteMonitorDeletion indicates an expected call of PerformRouteMonitorDeletion
func (mr *MockRouteMonitorInterfaceMockRecorder) PerformRouteMonitorDeletion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformRouteMonitorDeletion", reflect.TypeOf((*MockRouteMonitorInterface)(nil).PerformRouteMonitorDeletion), arg0)
}

// ShouldDeleteBlackBoxExporterResources mocks base method
func (m *MockRouteMonitorInterface) ShouldDeleteBlackBoxExporterResources(arg0 *v1alpha1.RouteMonitor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldDeleteBlackBoxExporterResources", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldDeleteBlackBoxExporterResources indicates an expected call of ShouldDeleteBlackBoxExporterResources
func (mr *MockRouteMonitorInterfaceMockRecorder) ShouldDeleteBlackBoxExporterResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldDeleteBlackBoxExporterResources", reflect.TypeOf((*MockRouteMonitorInterface)(nil).ShouldDeleteBlackBoxExporterResources), arg0)
}

// UpdateRouteURL mocks base method
func (m *MockRouteMonitorInterface) UpdateRouteURL(arg0 *v1.Route, arg1 *v1alpha1.RouteMonitor) (*reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteURL", arg0, arg1)
	ret0, _ := ret[0].(*reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteURL indicates an expected call of UpdateRouteURL
func (mr *MockRouteMonitorInterfaceMockRecorder) UpdateRouteURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteURL", reflect.TypeOf((*MockRouteMonitorInterface)(nil).UpdateRouteURL), arg0, arg1)
}

// WasDeleteRequested mocks base method
func (m *MockRouteMonitorInterface) WasDeleteRequested(arg0 *v1alpha1.RouteMonitor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasDeleteRequested", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WasDeleteRequested indicates an expected call of WasDeleteRequested
func (mr *MockRouteMonitorInterfaceMockRecorder) WasDeleteRequested(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasDeleteRequested", reflect.TypeOf((*MockRouteMonitorInterface)(nil).WasDeleteRequested), arg0)
}

// templateForBlackBoxExporterDeployment mocks base method
func (m *MockRouteMonitorInterface) templateForBlackBoxExporterDeployment() *v11.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "templateForBlackBoxExporterDeployment")
	ret0, _ := ret[0].(*v11.Deployment)
	return ret0
}

// templateForBlackBoxExporterDeployment indicates an expected call of templateForBlackBoxExporterDeployment
func (mr *MockRouteMonitorInterfaceMockRecorder) templateForBlackBoxExporterDeployment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "templateForBlackBoxExporterDeployment", reflect.TypeOf((*MockRouteMonitorInterface)(nil).templateForBlackBoxExporterDeployment))
}

// templateForBlackBoxExporterService mocks base method
func (m *MockRouteMonitorInterface) templateForBlackBoxExporterService() *v12.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "templateForBlackBoxExporterService")
	ret0, _ := ret[0].(*v12.Service)
	return ret0
}

// templateForBlackBoxExporterService indicates an expected call of templateForBlackBoxExporterService
func (mr *MockRouteMonitorInterfaceMockRecorder) templateForBlackBoxExporterService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "templateForBlackBoxExporterService", reflect.TypeOf((*MockRouteMonitorInterface)(nil).templateForBlackBoxExporterService))
}

// templateForServiceMonitorName mocks base method
func (m *MockRouteMonitorInterface) templateForServiceMonitorName(arg0 *v1alpha1.RouteMonitor) types.NamespacedName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "templateForServiceMonitorName", arg0)
	ret0, _ := ret[0].(types.NamespacedName)
	return ret0
}

// templateForServiceMonitorName indicates an expected call of templateForServiceMonitorName
func (mr *MockRouteMonitorInterfaceMockRecorder) templateForServiceMonitorName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "templateForServiceMonitorName", reflect.TypeOf((*MockRouteMonitorInterface)(nil).templateForServiceMonitorName), arg0)
}

// templateForServiceMonitorResource mocks base method
func (m *MockRouteMonitorInterface) templateForServiceMonitorResource(arg0 *v1alpha1.RouteMonitor, arg1 string) *v10.ServiceMonitor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "templateForServiceMonitorResource", arg0, arg1)
	ret0, _ := ret[0].(*v10.ServiceMonitor)
	return ret0
}

// templateForServiceMonitorResource indicates an expected call of templateForServiceMonitorResource
func (mr *MockRouteMonitorInterfaceMockRecorder) templateForServiceMonitorResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "templateForServiceMonitorResource", reflect.TypeOf((*MockRouteMonitorInterface)(nil).templateForServiceMonitorResource), arg0, arg1)
}
